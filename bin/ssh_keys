#!/bin/bash
# 
# Copyright 2019 Alexandre Pires (c.alexandre.pires@gmail.com)
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# 
# File: ansible_run 

SCRIPTDIR=$(dirname "$(readlink -f "$0")")
LIBDIR=${SCRIPTDIR}/../lib
RESDIR=${SCRIPTDIR}/../resources

source ${LIBDIR}/vault.bash || exit 1
source ${LIBDIR}/ssh.bash || exit 1

source project.rc || { echo "Project configuration not found! Aborting..."; exit 1; }

if [ $# -eq 0 ]; then
    printf "SSH Keys Management\n" 
    printf "usage: %s [lock|unlock|add|del|list] <name>\n" "$(basename ${0})"
    exit 0
fi

# Create ssh keys folder
mkdir -p ${SSH_KEYS}

case ${1} in 

    lock)
        if [ -z ${2} ]; then
            encrypt_ssh_keys ${SSH_KEYS}
        else
            [ -f ${SSH_KEYS}/${2}/id_rsa ] || { echo "Key ${2} does not exist! Aborting..."; exit 1; }
            encrypt_ssh_keys ${SSH_KEYS}/${2}
        fi
        ;;
    unlock)
        if [ -z ${2} ]; then
            decrypt_ssh_keys ${SSH_KEYS}
        else
            [ -f ${SSH_KEYS}/${2}/id_rsa ] || { echo "Key ${2} does not exist! Aborting..."; exit 1; }
            decrypt_ssh_keys ${SSH_KEYS}/${2}
        fi
        ;;
    add)
        [ -f ${SSH_KEYS}/${2}/id_rsa ] && { echo "Key ${2} already exist! Aborting..."; exit 1; }
        mkdir -p ${SSH_KEYS}/${2}
        ssh-keygen -t rsa -b 4096 -o -a 100 -f ${SSH_KEYS}/${2}/id_rsa
        ;;
    del)
        [ -d ${SSH_KEYS}/${2} ] || { echo "Key ${2} does not exist! Aborting..."; exit 1; }
        rm -rf --preserve-root "${SSH_KEYS}/${2}"
        ;;
    list)
        for SSH_KEY in $(ls ${SSH_KEYS}); do
            echo "${SSH_KEY}"
        done
        ;;
    *)
        echo "Unknown command ${1}! Aborting..."; exit 1;
        ;;
esac

exit 0